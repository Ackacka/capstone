<?php

class QuizDB {

    public static function addQuiz($quiz) {
        $db = Database::getDB();

        //
        //inserts into assessment the assessmentTypeID, userID, and level (difficulty).
        //inserts into quiz a new row with just the assessmentID generated by the 
        //previous insert statement and sql auto-increment, and a null value in passFail.
        $assessmentTypeID = $quiz->getAssessmentTypeID();
        $userID = $quiz->getStudentID();
        $level = $quiz->getDifficulty();

        try { //got some weird errors  when working on try, will get to later
            $query = 'INSERT INTO assessment
                        (assessmentTypeID, userID, level)
                      VALUES
                        (:assessmentTypeID, :userID, :level)';
            $statement = $db->prepare($query);
            $statement->bindValue(':assessmentTypeID', $assessmentTypeID);
            $statement->bindValue(':userID', $userID);
            $statement->bindValue(':level', $level);
            $statement->execute();
            $statement->closeCursor();

            $assessmentID = $db->lastInsertId();


            $query = 'INSERT INTO quiz
                        (assessmentID)
                     VALUES
                        (:assessmentID)';
            $statement = $db->prepare($query);
            $statement->bindValue(':assessmentID', $assessmentID);
            $statement->execute();
            $statement->closeCursor();
            return $assessmentID;
        } catch (PDOException $e) {
            $error_message = $e->getMessage();
            include("index.php");
            exit();
        }
    }

    public static function getLatestQuizByUser($userID){
        $db = Database::getDB();
        $query = 'SELECT * FROM assessment a
                  INNER JOIN quiz q ON a.assessmentID = q.assessmentID
                  WHERE a.userID = :userID
                  ORDER BY a.endDateTime DESC
                  LIMIT 1';
        $statement = $db->prepare($query);
        $statement->bindValue(":userID", $userID);
        $statement->execute();
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        $statement->closeCursor();
        
        if ($row === false) {
            return false;
        }
        
        $quiz = new Quiz($row['userID'], $row['level'], $questions = array());
        $quiz->setAssessmentID($row['assessmentID']);
        $quiz->setEnd($row['endDateTime']);
        $quiz->setStart($row['startDateTime']);
        $quiz->setQuestionsCorrect($row['questionsCorrect']);
        $quiz->setQuestionsWrong($row['questionsWrong']);
        $quiz->setPassFail($row['passFail']);
        return $quiz;
    }
    
    public static function getQuizzesByUser($userID){
        $db = Database::getDB();
        $query = 'SELECT * FROM assessment a
                  INNER JOIN quiz q ON a.assessmentID = q.assessmentID
                  WHERE a.userID = :userID';
        $statement = $db->prepare($query);
        $statement->bindValue(":userID", $userID);
        $statement->execute();
        $rows = $statement->fetchAll();
        $statement->closeCursor();
        
        $quizzes = null;
        
        foreach ($rows as $row) {
            $quiz = new Quiz($row['userID'], $row['level'], $questions = array());
            $quiz->setAssessmentID($row['assessmentID']);
            $quiz->setEnd($row['endDateTime']);
            $quiz->setStart($row['startDateTime']);
            $quiz->setQuestionsCorrect($row['questionsCorrect']);
            $quiz->setQuestionsWrong($row['questionsWrong']);
            $quiz->setPassFail($row['passFail']);
            
            $quizzes[] = $quiz;
        }
        return $quizzes;
    }
    
    public static function getQuiz($quizID) {
        $db = Database::getDB();
        $query = 'SELECT * FROM assessment a
                  INNER JOIN quiz q ON a.assessmentID = q.assessmentID
                  WHERE a.assessmentID = :assessmentID';
        $statement = $db->prepare($query);
        $statement->bindValue(":assessmentID", $quizID);
        $statement->execute();
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        $statement->closeCursor();
        
        $quiz = new Quiz($row['userID'], $row['level'], $questions = array());
        $quiz->setAssessmentID($row['assessmentID']);
        $quiz->setEnd($row['endDateTime']);
        $quiz->setStart($row['startDateTime']);
        $quiz->setQuestionsCorrect($row['questionsCorrect']);
        $quiz->setQuestionsWrong($row['questionsWrong']);
        $quiz->setPassFail($row['passFail']);
        
        return $quiz;
    }

    public static function updateQuiz($quizID, $totalCorrect, $questions, $dt) {
        $db = Database::getDB();
        $query = 'UPDATE `assessment`
                  SET questionsCorrect = :questionsCorrect,
                  questionsWrong = :questionsWrong,
                  endDateTime = :endDateTime
                  WHERE assessmentID = :assessmentID';
        $statement = $db->prepare($query);
        $statement->bindValue(":assessmentID", $quizID);
        $statement->bindValue(":questionsCorrect", $totalCorrect);
        $statement->bindValue(":questionsWrong", (count($questions) - $totalCorrect));
        $statement->bindValue(":endDateTime", $dt);
        $statement->execute();
        $statement->closeCursor();
        
    }

    public static function passOrFailQuiz($quizID, $passFail) {
        $db = Database::getDB();
        $query = 'UPDATE quiz 
                 SET passFail = :passFail
                 WHERE assessmentID = :assessmentID';
        $statement = $db->prepare($query);
        $statement->bindValue(":assessmentID", $quizID);
        $statement->bindValue(":passFail", $passFail);
        $statement->execute();
        $statement->closeCursor();
    }

}
